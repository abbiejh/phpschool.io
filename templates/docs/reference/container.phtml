<h2 id="container" class="doc__title">The Container<a class="anchor" href="#container">#</a><a href="#page-top" class="back-to-top">^ TOP</a></h2>

<p>Internally, the workshop application uses a <a target="_blank" href="https://en.wikipedia.org/wiki/Dependency_Injection">dependency injection container</a>. This allows you to request other services from the application and replace services with your own implementations. We use the <a target="_blank" href="http://php-di.org">PHP-DI</a> package for dependency injection, a <code>container-interop</code> compatible dependency injection container.</p>
<p>Services are configured in <code>app/config.php</code>. You can use all of the features of <a target="_blank" href="http://php-di.org">PHP-DI</a> so check the docs there.</p>

<p>The file <code>app/config.php</code> should return an array of service definitions for the container. The key being the name of the service and the value the actual factory. For the case of exercises the service name should <strong>always</strong> be the class name.</p>

<h3>Defining Factories</h3>
<h4>Simple Object with No dependencies</h4>
<p><code>\DI\Object()</code> is a helper function to create a factory which will simply run <code>new $yourClassName</code> when asking for the service from the container.</p>
<pre><code lang="php">return [
    ...snip
    Generator::class => \DI\Object(),
];
</code></pre>
<h4>Object with dependencies</h4>

<p>PHP-DI provides more powerful features such as being able to use anonymous functions and any callables as a factory. When using a callable your callable will be injected with the container itself which you can pull other services from!</p>
<p>If you pulled in a third party library for random number generation you might define a service like below. We use the battle tested package: <code>ircmaxell/random-lib</code> as an example.</p>
<p>We use an anonymous function and pull the strength parameter from the container and create a new random number generator based on that.</p>
<pre><code lang="php">return [
    ...snip
    \RandomLib\Generator::class => \DI\factory(function (ContainerInterface $container) {
        $strength = $container->get('random-number-generator-strength');
        $factory = new \RandomLib\Factory;
        return $factory->getGenerator(new \SecurityLib\Strength($strength));
    }),
];
</code></pre>

<h3>Overwriting existing services</h3>
<p>As your workshop configuration is merged into default workshop application configuration, you can override existing services with your own implementation. Maybe you want to override the <code>\Symfony\Component\Filesystem\Filesystem</code> service with your own version, maybe you extended it to add some methods.</p>
<p>The below definition would replace the <code>\Symfony\Component\Filesystem\Filesystem</code> service with your own implementation: <code>MyFileSystem</code> which extends from <code>\Symfony\Component\Filesystem\Filesystem</code>.</p>

<pre><code lang="php">return [
    ...snip
    \Symfony\Component\Filesystem\Filesystem::class => \DI\factory(function (ContainerInterface $c) {
        return new MyFileSystem;
    }),
];
</code></pre>

<p>Now when you ask the container for <code>\Symfony\Component\Filesystem\Filesystem</code> you will receive an instance of <code>MyFileSystem</code>.</p>
<p class="note note-warning">Be aware that anything already using the <code>\Symfony\Component\Filesystem\Filesystem</code> service will expect it to be an instance of <code>\Symfony\Component\Filesystem\Filesystem</code>, so if you replace it with an altogether different object, expect things to break!</p>

<p>Check <a href="#available-services">Available Services</a> for a list and description of services available to you.</p>
